// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SitesApi.Tests.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SitesAPIFilteringFeature : object, Xunit.IClassFixture<SitesAPIFilteringFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SitesFiltering.feature"
#line hidden
        
        public SitesAPIFilteringFeature(SitesAPIFilteringFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Sites API Filtering", ("    As an API consumer\n    I want to filter sites by name\n    So that I can find " +
                    "specific sites efficiently"), global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 6
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "SiteId",
                        "SiteName",
                        "SiteUrl",
                        "SiteX",
                        "SiteY"});
            table1.AddRow(new string[] {
                        "1",
                        "Alpha Site",
                        "https://alpha.example.com",
                        "10.5",
                        "20.3"});
            table1.AddRow(new string[] {
                        "2",
                        "Beta Testing",
                        "https://beta.example.com",
                        "15.2",
                        "25.7"});
            table1.AddRow(new string[] {
                        "3",
                        "Gamma Ray",
                        "https://gamma.example.com",
                        "12.8",
                        "18.9"});
            table1.AddRow(new string[] {
                        "4",
                        "Alpha Beta",
                        "https://alphabeta.com",
                        "22.1",
                        "30.4"});
            table1.AddRow(new string[] {
                        "5",
                        "Production Site",
                        "https://prod.example.com",
                        "8.7",
                        "14.2"});
            table1.AddRow(new string[] {
                        "6",
                        "Test Environment",
                        "https://test.example.com",
                        "19.3",
                        "27.6"});
            table1.AddRow(new string[] {
                        "7",
                        "Development",
                        "https://dev.example.com",
                        "11.9",
                        "21.8"});
            table1.AddRow(new string[] {
                        "8",
                        "Staging Area",
                        "https://staging.com",
                        "16.4",
                        "23.1"});
#line 7
    await testRunner.GivenAsync("the following sites exist in the system:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter by exact site name match")]
        [Xunit.TraitAttribute("FeatureTitle", "Sites API Filtering")]
        [Xunit.TraitAttribute("Description", "Filter by exact site name match")]
        public async System.Threading.Tasks.Task FilterByExactSiteNameMatch()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Filter by exact site name match", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 19
    await testRunner.WhenAsync("I request sites with filter \'{\"siteName\": \"Alpha Site\"}\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
    await testRunner.ThenAsync("the response should contain 1 sites", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
    await testRunner.AndAsync("the first site should have name \"Alpha Site\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter by partial site name match (case insensitive)")]
        [Xunit.TraitAttribute("FeatureTitle", "Sites API Filtering")]
        [Xunit.TraitAttribute("Description", "Filter by partial site name match (case insensitive)")]
        public async System.Threading.Tasks.Task FilterByPartialSiteNameMatchCaseInsensitive()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Filter by partial site name match (case insensitive)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 24
    await testRunner.WhenAsync("I request sites with filter \'{\"siteName\": \"alpha\"}\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
    await testRunner.ThenAsync("the response should contain 2 sites", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "SiteName"});
                table2.AddRow(new string[] {
                            "Alpha Site"});
                table2.AddRow(new string[] {
                            "Alpha Beta"});
#line 26
    await testRunner.AndAsync("the sites should contain names:", ((string)(null)), table2, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter by partial site name match (different case)")]
        [Xunit.TraitAttribute("FeatureTitle", "Sites API Filtering")]
        [Xunit.TraitAttribute("Description", "Filter by partial site name match (different case)")]
        public async System.Threading.Tasks.Task FilterByPartialSiteNameMatchDifferentCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Filter by partial site name match (different case)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 32
    await testRunner.WhenAsync("I request sites with filter \'{\"siteName\": \"BETA\"}\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
    await testRunner.ThenAsync("the response should contain 2 sites", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "SiteName"});
                table3.AddRow(new string[] {
                            "Beta Testing"});
                table3.AddRow(new string[] {
                            "Alpha Beta"});
#line 34
    await testRunner.AndAsync("the sites should contain names:", ((string)(null)), table3, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter with no matches")]
        [Xunit.TraitAttribute("FeatureTitle", "Sites API Filtering")]
        [Xunit.TraitAttribute("Description", "Filter with no matches")]
        public async System.Threading.Tasks.Task FilterWithNoMatches()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Filter with no matches", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 40
    await testRunner.WhenAsync("I request sites with filter \'{\"siteName\": \"NonExistent\"}\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
    await testRunner.ThenAsync("the response should contain 0 sites", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
    await testRunner.AndAsync("the response should have totalCount of 0", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter combined with pagination")]
        [Xunit.TraitAttribute("FeatureTitle", "Sites API Filtering")]
        [Xunit.TraitAttribute("Description", "Filter combined with pagination")]
        public async System.Threading.Tasks.Task FilterCombinedWithPagination()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Filter combined with pagination", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 45
    await testRunner.WhenAsync("I request sites with filter \'{\"siteName\": \"Site\"}\' and page 1 and page size 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
    await testRunner.ThenAsync("the response should contain 1 sites", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
    await testRunner.AndAsync("the response should have totalCount of 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 48
    await testRunner.AndAsync("the response should have pageNumber of 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 49
    await testRunner.AndAsync("the response should have pageSize of 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 50
    await testRunner.AndAsync("the response should have totalPages of 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 51
    await testRunner.AndAsync("the response should have hasNext as true", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter with empty string returns all sites")]
        [Xunit.TraitAttribute("FeatureTitle", "Sites API Filtering")]
        [Xunit.TraitAttribute("Description", "Filter with empty string returns all sites")]
        public async System.Threading.Tasks.Task FilterWithEmptyStringReturnsAllSites()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Filter with empty string returns all sites", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 54
    await testRunner.WhenAsync("I request sites with filter \'{\"siteName\": \"\"}\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("the response should contain 8 sites", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
    await testRunner.AndAsync("the response should have totalCount of 8", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invalid JSON filter returns bad request")]
        [Xunit.TraitAttribute("FeatureTitle", "Sites API Filtering")]
        [Xunit.TraitAttribute("Description", "Invalid JSON filter returns bad request")]
        public async System.Threading.Tasks.Task InvalidJSONFilterReturnsBadRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Invalid JSON filter returns bad request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 59
    await testRunner.WhenAsync("I request sites with invalid filter \'invalid-json\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 60
    await testRunner.ThenAsync("the response should return status code 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
    await testRunner.AndAsync("the response should contain error message about invalid JSON", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="POST search endpoint with filter")]
        [Xunit.TraitAttribute("FeatureTitle", "Sites API Filtering")]
        [Xunit.TraitAttribute("Description", "POST search endpoint with filter")]
        public async System.Threading.Tasks.Task POSTSearchEndpointWithFilter()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("POST search endpoint with filter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 64
    await testRunner.WhenAsync("I POST to search endpoint with:", ("{\n    \"page\": 1,\n    \"size\": 10,\n    \"filter\": {\n        \"siteName\": \"test\"\n    }" +
                        "\n}"), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
    await testRunner.ThenAsync("the response should contain 2 sites", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "SiteName"});
                table4.AddRow(new string[] {
                            "Beta Testing"});
                table4.AddRow(new string[] {
                            "Test Environment"});
#line 75
    await testRunner.AndAsync("the sites should contain names:", ((string)(null)), table4, "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="POST search endpoint with pagination")]
        [Xunit.TraitAttribute("FeatureTitle", "Sites API Filtering")]
        [Xunit.TraitAttribute("Description", "POST search endpoint with pagination")]
        public async System.Threading.Tasks.Task POSTSearchEndpointWithPagination()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("POST search endpoint with pagination", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
await this.FeatureBackgroundAsync();
#line hidden
#line 81
    await testRunner.WhenAsync("I POST to search endpoint with:", "{\n    \"page\": 2,\n    \"size\": 3,\n    \"filter\": {}\n}", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 89
    await testRunner.ThenAsync("the response should contain 3 sites", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 90
    await testRunner.AndAsync("the response should have pageNumber of 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 91
    await testRunner.AndAsync("the response should have pageSize of 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await SitesAPIFilteringFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await SitesAPIFilteringFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
